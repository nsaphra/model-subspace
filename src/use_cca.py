from __future__ import absolute_import
from __future__ import print_function
import numpy as np
import argparse

import cca_core  # from https://github.com/google/svcca

def load_subspace(filename):
    fh = open(filename, 'rb')
    subspace = None
    while True:
        try:
            next_batch = np.load(fh)
        except:
            break

        if subspace is None:
            assert(len(subspace.shape) == 2)
            subspace = next_batch
        else:
            subspace = np.concatenate([subspace, next_batch])
    fh.close()
    return subspace.transpose() # return dimensions num_neurons1 x data_points

# The models must be run on the same data, with the same sequence length and batch size.
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='SVCCA on npy files generated by appending each batch.')
    parser.add_argument('--subspace-file1', type=str,
                        help='location of first subspace saved as .npy')
    parser.add_argument('--subspace-file2', type=str,
                        help='location of second subspace saved as .npy')
    parser.add_argument('--results-file', type=str,
                        help='location to save mean cca scores')
    args = parser.parse_args()

    results_file = open(args.results_file, 'a')
    print(cca_core.get_cca_similarity(load_subspace(args.subspace_file1), load_subspace(args.subspace_file2))["mean"],
    file=results_file)
